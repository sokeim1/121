import os
import logging
import signal
import sys
from datetime import datetime
import re
import requests
import tempfile
from urllib.parse import urlparse, parse_qs, quote_plus
import asyncio
import json
import sqlite3
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from pyrogram.enums import ChatAction, ParseMode
import yt_dlp
import subprocess
import sys
import os
from datetime import datetime, timedelta
import random
import time
import gc
from functools import lru_cache
import base64
import hashlib
from io import BytesIO
import shutil

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('/app/logs', exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('/app/logs/bot.log'),
        logging.StreamHandler(sys.stdout)  # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ª–æ–≥–∞—Ö Amvera
    ]
)
logger = logging.getLogger(__name__)

# Graceful shutdown –¥–ª—è Amvera
def signal_handler(signum, frame):
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
    sys.exit(0)

signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

# –ü–æ–∏—Å–∫ ffmpeg
def find_ffmpeg():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø—É—Ç—å –∫ ffmpeg"""
    ffmpeg_path = shutil.which('ffmpeg')
    if ffmpeg_path:
        return ffmpeg_path
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏
    possible_paths = [
        'ffmpeg',
        'C:/ffmpeg/bin/ffmpeg.exe',
        '/usr/bin/ffmpeg',
        '/usr/local/bin/ffmpeg'
    ]
    for path in possible_paths:
        try:
            subprocess.run([path, '-version'], capture_output=True, timeout=5)
            return path
        except:
            continue
    return None

FFMPEG_PATH = find_ffmpeg()
print(f"üîç –ü–æ–∏—Å–∫ ffmpeg: {'‚úÖ –ù–∞–π–¥–µ–Ω - ' + FFMPEG_PATH if FFMPEG_PATH else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = '7428917256:AAH9DDNSIlquNVw8f1hC35qmD8FpMa3LTCg'
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')
USE_PROXY = os.getenv('USE_PROXY', 'false').lower() == 'true'
PROXY_URL = os.getenv('PROXY_URL', '')  # –ù–∞–ø—Ä–∏–º–µ—Ä: http://proxy:port
MAX_FILE_SIZE = int(os.getenv('MAX_FILE_SIZE', 200 * 1024 * 1024))  # 200MB –æ–±—â–∏–π –ª–∏–º–∏—Ç
MAX_FILE_SIZE_TIKTOK = int(os.getenv('MAX_FILE_SIZE_TIKTOK', 50 * 1024 * 1024))   # 50MB –¥–ª—è TikTok
MAX_FILE_SIZE_YOUTUBE = int(os.getenv('MAX_FILE_SIZE_YOUTUBE', 200 * 1024 * 1024)) # 200MB –¥–ª—è YouTube
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID', '')  # –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞
# –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—É—Å—Ç–∞
ADMIN_CHAT_IDS = [int(id.strip()) for id in os.getenv('ADMIN_CHAT_IDS', '7850455999').split(',') if id.strip()]

STORAGE_CHANNEL_ID = "@dsds12f"  # username –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤

async def upload_to_storage_channel(client, file_data, filename, caption=""):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ –∫–∞–Ω–∞–ª-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç message_id"""
    try:
        file_obj = BytesIO(file_data)
        file_obj.name = filename
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
        try:
            chat = await client.get_chat(STORAGE_CHANNEL_ID)
            logger.info(f"–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title if hasattr(chat, 'title') else 'Unknown'}")
        except Exception as e:
            logger.error(f"–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return None
        
        message = await client.send_video(
            chat_id=STORAGE_CHANNEL_ID,
            video=file_obj,
            caption=f"üìÅ {caption}",
            parse_mode=ParseMode.HTML
        )
        return message.id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        return None

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
EMOJIS = {
    'fire': 'üî•', 'star': '‚≠ê', 'diamond': 'üíé', 'crown': 'üëë',
    'rocket': 'üöÄ', 'magic': '‚ú®', 'heart': 'üíñ', 'lightning': '‚ö°',
    'trophy': 'üèÜ', 'gem': 'üí†', 'sparkles': 'üåü', 'rainbow': 'üåà',
    'download': 'üì•', 'upload': 'üì§', 'video': 'üé¨', 'music': 'üéµ',
    'user': 'üë§', 'users': 'üë•', 'link': 'üîó', 'time': '‚è±Ô∏è',
    'size': 'üíæ', 'quality': 'üéØ', 'gift': 'üéÅ', 'key': 'üóùÔ∏è',
    'unlock': 'üîì', 'lock': 'üîí', 'warning': '‚ö†Ô∏è', 'error': '‚ùå',
    'success': '‚úÖ', 'info': '‚ÑπÔ∏è', 'settings': '‚öôÔ∏è', 'stats': 'üìä'
}

class Database:
    def __init__(self, db_path='/app/data/bot_users.db'):
        self.db_path = db_path
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ë–î –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
        self.init_db()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                referrer_id INTEGER,
                referral_count INTEGER DEFAULT 0,
                total_downloads INTEGER DEFAULT 0,
                premium_until DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                last_active DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–æ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS downloads (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                video_url TEXT,
                video_title TEXT,
                quality TEXT,
                file_size INTEGER,
                download_time REAL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def add_user(self, user_id, username=None, first_name=None, referrer_id=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name, referrer_id)
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, first_name, referrer_id))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ —Å—á–µ—Ç—á–∏–∫
        if referrer_id:
            cursor.execute('''
                UPDATE users SET referral_count = referral_count + 1 
                WHERE user_id = ?
            ''', (referrer_id,))
        
        conn.commit()
        conn.close()
    
    def get_user(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM users WHERE user_id = ?
        ''', (user_id,))
        
        user = cursor.fetchone()
        conn.close()
        return user
    
    def update_user_activity(self, user_id):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE users SET last_active = CURRENT_TIMESTAMP 
            WHERE user_id = ?
        ''', (user_id,))
        
        conn.commit()
        conn.close()
    
    def add_download(self, user_id, video_url, video_title, quality, file_size, download_time):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–≥—Ä—É–∑–∫–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO downloads (user_id, video_url, video_title, quality, file_size, download_time)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, video_url, video_title, quality, file_size, download_time))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            UPDATE users SET total_downloads = total_downloads + 1 
            WHERE user_id = ?
        ''', (user_id,))
        
        conn.commit()
        conn.close()
    
    def get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM downloads')
        total_downloads = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM users WHERE date(last_active) = date("now")')
        active_today = cursor.fetchone()[0]
        
        conn.close()
        return {
            'total_users': total_users,
            'total_downloads': total_downloads,
            'active_today': active_today
        }

class TikTokDownloader:
    def __init__(self):
        self.session = requests.Session()
        if USE_PROXY and PROXY_URL:
            self.session.proxies = {
                'http': PROXY_URL,
                'https': PROXY_URL
            }
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
            'Accept': '*/*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Sec-Ch-Ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Google Chrome";v="122"',
            'Sec-Ch-Ua-Mobile': '?0',
            'Sec-Ch-Ua-Platform': '"Windows"',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'cross-origin',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
        })

    def get_quality_options(self, user_referrals, is_admin, platform):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        if platform == 'youtube':
            return {
                '360p': {
                    'format': 'bestvideo[height<=360]+bestaudio/best[height<=360]',
                    'emoji': 'üì±',
                    'required_refs': 0
                },
                '480p': {
                    'format': 'bestvideo[height<=480]+bestaudio/best[height<=480]',
                    'emoji': 'üíª',
                    'required_refs': 0
                },
                '720p': {
                    'format': 'bestvideo[height<=720]+bestaudio/best[height<=720]',
                    'emoji': 'üñ•Ô∏è',
                    'required_refs': 0
                },
                '1080p': {
                    'format': 'bestvideo[height<=1080]+bestaudio/best[height<=1080]',
                    'emoji': 'üé¨',
                    'required_refs': 3
                },
                'best': {
                    'format': 'bestvideo+bestaudio/best',
                    'emoji': 'üëë',
                    'required_refs': 3
                },
                'audio_only': {
                    'format': 'bestaudio[ext=m4a]/bestaudio',
                    'emoji': 'üéµ',
                    'required_refs': 0
                }
            }
        else:  # TikTok
            return {
                'default': {'format': 'best[height<=720]/best', 'emoji': 'üé¨', 'required_refs': 0}
            }
    
    @lru_cache(maxsize=100)
    def extract_video_url(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL TikTok –∏–ª–∏ YouTube –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
        tiktok_patterns = [
            r'https?://(?:www\.)?tiktok\.com/@[\w.-]+/video/\d+',
            r'https?://vm\.tiktok\.com/[\w.-]+',
            r'https?://(?:www\.)?tiktok\.com/t/[\w.-]+',
            r'https?://(?:m\.)?tiktok\.com/@[\w.-]+/video/\d+',
            r'https?://vt\.tiktok\.com/[\w.-]+'
        ]
        youtube_patterns = [
            r'https?://(?:www\.)?youtube\.com/watch\?v=[\w-]+',
            r'https?://youtu\.be/[\w-]+',
            r'https?://(?:www\.)?youtube\.com/shorts/[\w-]+',
            r'https?://m\.youtube\.com/watch\?v=[\w-]+'
        ]
        all_patterns = tiktok_patterns + youtube_patterns
        for pattern in all_patterns:
            match = re.search(pattern, text)
            if match:
                return match.group(0)
        return None
    
    def resolve_tiktok_url(self, url):
        """–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫"""
        try:
            if any(short in url for short in ['vm.tiktok.com', '/t/', 'vt.tiktok.com']):
                response = self.session.head(url, allow_redirects=True, timeout=15)
                return response.url
            return url
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ URL: {e}")
            return url
    
    async def get_video_info(self, url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ TikTok –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ yt-dlp"""
        await asyncio.sleep(random.uniform(0.5, 2))
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º yt-dlp –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            ydl_opts = {
                'quiet': True,
                'no_warnings': True,
                'extract_flat': False,
                'socket_timeout': 30,
                'retries': 2
            }
            def extract_info():
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    return ydl.extract_info(url, download=False)
            info = await asyncio.get_event_loop().run_in_executor(None, extract_info)
            if info:
                return {
                    'title': info.get('title', 'TikTok Video')[:100],
                    'uploader': info.get('uploader', 'Unknown'),
                    'duration': info.get('duration', 30),
                    'view_count': info.get('view_count', 0),
                    'like_count': info.get('like_count', 0),
                    'comment_count': info.get('comment_count', 0),
                    'description': info.get('description', ''),
                    'upload_date': str(info.get('upload_date', '')),
                    'webpage_url': url,
                    'thumbnail': info.get('thumbnail', ''),
                    'formats_available': len(info.get('formats', [])),
                    'width': info.get('width', 1080),
                    'height': info.get('height', 1920),
                    'fps': info.get('fps', 30),
                    'filesize': info.get('filesize', 0)
                }
        except Exception as e:
            logger.error(f"yt-dlp info extraction failed: {e}")
        # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        return {
            'title': 'TikTok Video',
            'uploader': 'Unknown',
            'duration': 30,
            'view_count': 1000,
            'like_count': 100,
            'comment_count': 10,
            'description': '',
            'upload_date': '',
            'webpage_url': url,
            'thumbnail': '',
            'formats_available': 1,
            'width': 1080,
            'height': 1920,
            'fps': 30,
            'filesize': 5000000
        }
    
    async def download_with_quality(self, url, quality_format):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ TikTok –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ yt-dlp"""
        await asyncio.sleep(random.uniform(0.5, 2))
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ yt-dlp
            ydl_opts = {
                'format': 'best[height<=1080]/best',
                'quiet': True,
                'no_warnings': True,
                'extract_flat': False,
                'socket_timeout': 60,
                'retries': 3,
                'outtmpl': '%(title).50s.%(ext)s',
                'prefer_ffmpeg': False,
                'writesubtitles': False,
                'writeautomaticsub': False
            }
            def download_video():
                with tempfile.TemporaryDirectory() as temp_dir:
                    ydl_opts['outtmpl'] = os.path.join(temp_dir, '%(title).50s.%(ext)s')
                    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                        ydl.download([url])
                    # –ù–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                    files = os.listdir(temp_dir)
                    if not files:
                        return None, None, "–§–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω"
                    # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º mp4 —Ñ–∞–π–ª—ã
                    video_files = [f for f in files if f.endswith(('.mp4', '.webm', '.mkv'))]
                    target_file = video_files[0] if video_files else files[0]
                    video_path = os.path.join(temp_dir, target_file)
                    file_size = os.path.getsize(video_path)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    if file_size > MAX_FILE_SIZE_TIKTOK:
                        return None, None, f'–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size/1024/1024:.1f}MB (–ª–∏–º–∏—Ç: {MAX_FILE_SIZE_TIKTOK/1024/1024:.0f}MB)'
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                    with open(video_path, 'rb') as f:
                        video_data = f.read()
                    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                    safe_filename = re.sub(r'[^-\u007F\w\s-]', '_', target_file)
                    if not safe_filename.endswith('.mp4'):
                        safe_filename = f"{safe_filename.rsplit('.', 1)[0]}.mp4"
                    return video_data, safe_filename, None
            video_data, filename, error = await asyncio.get_event_loop().run_in_executor(None, download_video)
            if error:
                return {'success': False, 'error': error}
            if video_data and filename:
                return {
                    'success': True,
                    'data': video_data,
                    'filename': filename,
                    'size': len(video_data)
                }
        except Exception as e:
            logger.error(f"yt-dlp TikTok download failed: {e}")
        # Fallback - –ø–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π API –º–µ—Ç–æ–¥
        try:
            logger.info("–ü—Ä–æ–±—É–µ–º fallback API –º–µ—Ç–æ–¥...")
            return await self.fallback_api_download(url)
        except Exception as e:
            logger.error(f"Fallback –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            return {'success': False, 'error': '–í—Å–µ –º–µ—Ç–æ–¥—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏'}
    
    async def fallback_api_download(self, url):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API"""
        try:
            # –ü—Ä–æ–±—É–µ–º ssstik.io
            api_url = "https://ssstik.io/abc"
            data = {
                'id': url,
                'locale': 'en',
                'tt': 'dQw4w9W'  # –ë–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            }
            
            response = self.session.post(api_url, data=data, timeout=30)
            
            if response.status_code == 200:
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥)
                content = response.text
                
                # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –≤ –æ—Ç–≤–µ—Ç–µ
                import re
                video_url_match = re.search(r'href="([^"]*)" class="[^"]*download[^"]*"', content)
                if video_url_match:
                    video_url = video_url_match.group(1)
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                    video_response = self.session.get(video_url, timeout=120)
                    if video_response.status_code == 200:
                        filename = f"tiktok_video_{int(time.time())}.mp4"
                        return {
                            'success': True,
                            'data': video_response.content,
                            'filename': filename,
                            'size': len(video_response.content)
                        }
            
            return {'success': False, 'error': 'API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}
            
        except Exception as e:
            logger.error(f"Fallback API error: {e}")
            return {'success': False, 'error': f'Fallback –æ—à–∏–±–∫–∞: {str(e)[:100]}'}

    def detect_platform(self, url):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤–∏–¥–µ–æ"""
        if any(domain in url for domain in ['tiktok.com', 'vm.tiktok.com', 'vt.tiktok.com']):
            return 'tiktok'
        elif any(domain in url for domain in ['youtube.com', 'youtu.be']):
            return 'youtube'
        return None

class YouTubeDownloader:
    def __init__(self):
        self.ydl_opts_base = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': False,
            'ignoreerrors': False,
            'socket_timeout': 30,
            'retries': 2,
            'geo_bypass': True,
            'prefer_ffmpeg': True,
            'merge_output_format': 'mp4',
            'writesubtitles': False,
            'writeautomaticsub': False,
        }
        if FFMPEG_PATH:
            self.ydl_opts_base['ffmpeg_location'] = FFMPEG_PATH
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg: {FFMPEG_PATH}")
        else:
            print("‚ö†Ô∏è ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")

    async def get_video_info(self, url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ YouTube –≤–∏–¥–µ–æ"""
        opts = self.ydl_opts_base.copy()
        try:
            def extract_info():
                with yt_dlp.YoutubeDL(opts) as ydl:
                    info = ydl.extract_info(url, download=False)
                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                    if info and 'formats' in info:
                        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –≤–∏–¥–µ–æ:")
                        for fmt in info['formats'][:10]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10
                            height = fmt.get('height', 'N/A')
                            ext = fmt.get('ext', 'N/A')
                            format_id = fmt.get('format_id', 'N/A')
                            logger.info(f"  {format_id}: {height}p {ext}")
                    return info
            info = await asyncio.get_event_loop().run_in_executor(None, extract_info)
            return info
        except Exception as e:
            logger.error(f"YouTube info error: {e}")
            return None

    async def download_with_quality(self, url, quality_format):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ YouTube –≤–∏–¥–µ–æ"""
        opts = self.ydl_opts_base.copy()
        if FFMPEG_PATH:
            opts.update({
                'format': quality_format,
                'prefer_ffmpeg': True,
                'merge_output_format': 'mp4',
                'postprocessors': [{
                    'key': 'FFmpegVideoConvertor',
                    'preferedformat': 'mp4',
                }]
            })
        else:
            # –ë–µ–∑ ffmpeg - –≤—ã–±–∏—Ä–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ mp4 —Ñ–æ—Ä–º–∞—Ç—ã
            safe_format = quality_format.replace('bestvideo+bestaudio', 'best[ext=mp4]')
            opts.update({
                'format': f'{safe_format}/best[ext=mp4]/best',
                'prefer_ffmpeg': False,
                'postprocessors': []
            })
        logger.info(f"–°–∫–∞—á–∏–≤–∞–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: {quality_format}")
        try:
            def download_video():
                with tempfile.TemporaryDirectory() as temp_dir:
                    opts['outtmpl'] = os.path.join(temp_dir, '%(title).50s.%(ext)s')
                    with yt_dlp.YoutubeDL(opts) as ydl:
                        info = ydl.extract_info(url, download=False)
                        if info and 'formats' in info:
                            logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
                            for fmt in sorted(info['formats'], key=lambda x: x.get('height', 0) or 0, reverse=True)[:10]:
                                height = fmt.get('height') or 'N/A'
                                filesize = fmt.get('filesize')
                                size_str = f"{filesize/1024/1024:.1f}MB" if filesize else "–Ω–µ–∏–∑–≤."
                                vcodec = fmt.get('vcodec', 'N/A')[:10]
                                acodec = fmt.get('acodec', 'N/A')[:10]
                                format_id = fmt.get('format_id', 'N/A')
                                logger.info(f"  {format_id}: {height}p, {size_str}, v:{vcodec}, a:{acodec}")
                        ydl.download([url])
                    files = os.listdir(temp_dir)
                    mp4_files = [f for f in files if f.endswith('.mp4')]
                    target_file = mp4_files[0] if mp4_files else files[0]
                    video_path = os.path.join(temp_dir, target_file)
                    file_size = os.path.getsize(video_path)
                    logger.info(f"–ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª: {target_file}, —Ä–∞–∑–º–µ—Ä: {file_size/1024/1024:.1f}MB")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    if file_size > MAX_FILE_SIZE_YOUTUBE:
                        return None, None, f'–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size/1024/1024:.1f}MB (–ª–∏–º–∏—Ç: {MAX_FILE_SIZE_YOUTUBE/1024/1024:.0f}MB)'
                    with open(video_path, 'rb') as f:
                        video_data = f.read()
                    return video_data, target_file, None
            video_data, filename, error = await asyncio.get_event_loop().run_in_executor(None, download_video)
            if error:
                return {'success': False, 'error': error}
            if video_data and filename:
                return {
                    'success': True,
                    'data': video_data,
                    'filename': filename
                }
        except Exception as e:
            logger.error(f"YouTube download error: {e}")
        return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube'}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
db = Database()
downloader = TikTokDownloader()
youtube_downloader = YouTubeDownloader()
bot_start_time = datetime.now()

API_ID = 28553397
API_HASH = "0502f27656ae614806a1f24264136fb0"

app = Client(
    "downloader_bot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

user_data_dict = {}

def generate_referral_link(user_id, bot_username):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    try:
        encoded_id = base64.b64encode(str(user_id).encode()).decode()
        return f"https://t.me/{bot_username}?start=ref_{encoded_id}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
        return f"https://t.me/{bot_username}"

def decode_referral_code(code):
    """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
    try:
        if code.startswith('ref_'):
            encoded_id = code[4:]  # –£–±–∏—Ä–∞–µ–º 'ref_'
            decoded_id = base64.b64decode(encoded_id.encode()).decode()
            return int(decoded_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: {e}")
        return None

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_CHAT_IDS

@app.on_message(filters.command("start"))
async def start(client, message):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    user = message.from_user
    args = message.text.split()
    me = await client.get_me()
    bot_username = me.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    referrer_id = None
    if len(args) > 1 and args[1].startswith('ref_'):
        referrer_id = decode_referral_code(args[1])
        if referrer_id == user.id:
            referrer_id = None  # –ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db.add_user(user.id, user.username, user.first_name, referrer_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = db.get_user(user.id)
    referral_count = user_data[4] if user_data else 0
    
    welcome_text = f"""
{EMOJIS['fire']} <b>TikTok Downloader Premium</b> {EMOJIS['fire']}

{EMOJIS['sparkles']} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{user.first_name}</b>!

{EMOJIS['diamond']} <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b>
{EMOJIS['users']} –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referral_count}</b>
{EMOJIS['quality']} –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:
‚Ä¢ 360p/480p/720p - {EMOJIS['success']} <i>–î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º</i>
‚Ä¢ 1080p - {"‚úÖ <i>–î–æ—Å—Ç—É–ø–Ω–æ</i>" if referral_count >= 3 or is_admin(user.id) else "üîí <i>–ù—É–∂–Ω–æ 3 –¥—Ä—É–≥–∞</i>"}

{EMOJIS['gift']} <b>–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏:</b>
{EMOJIS['diamond']} 3 –¥—Ä—É–≥–∞ = 1080p –∫–∞—á–µ—Å—Ç–≤–æ

{EMOJIS['rocket']} <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –∏–ª–∏ YouTube –≤–∏–¥–µ–æ
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ
3Ô∏è‚É£ –ü–æ–ª—É—á–∏ –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤!

{EMOJIS['link']} <b>–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
<code>{generate_referral_link(user.id, bot_username)}</code>
"""
    
    if referrer_id:
        welcome_text += f"\n{EMOJIS['heart']} <i>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!</i>"
    
    referral_link = generate_referral_link(user.id, bot_username)
    share_url = f"https://t.me/share/url?url={quote_plus(referral_link)}&text={quote_plus('–°–∫–∞—á–∏–≤–∞–π TikTok –∏ YouTube –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤!')}"
    
    keyboard = [
        [InlineKeyboardButton(f"{EMOJIS['users']} –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", url=share_url)],
        [InlineKeyboardButton(f"{EMOJIS['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
         InlineKeyboardButton(f"{EMOJIS['info']} –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    
    await message.reply_text(
        welcome_text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard),
        disable_web_page_preview=True
    )

async def quality_selection(client, message, tiktok_url: str, video_info: dict):
    """–í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ –¥–ª—è TikTok"""
    user = message.from_user
    user_data = db.get_user(user.id)
    referral_count = user_data[4] if user_data else 0
    is_user_admin = is_admin(user.id)
    
    quality_options = downloader.get_quality_options(referral_count, is_user_admin, 'tiktok')
    
    text = f"""
{EMOJIS['video']} <b>TikTok –≤–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ:</b>

{EMOJIS['music']} <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {video_info.get('title', 'TikTok Video')}
{EMOJIS['user']} <b>–ê–≤—Ç–æ—Ä:</b> @{video_info.get('uploader', 'Unknown')}
{EMOJIS['time']} <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {video_info.get('duration', 0)}—Å
üëÄ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {video_info.get('view_count', 0):,}
‚ù§Ô∏è <b>–õ–∞–π–∫–∏:</b> {video_info.get('like_count', 0):,}
üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b> {video_info.get('comment_count', 0):,}
üìê <b>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:</b> {video_info.get('width', 0)}x{video_info.get('height', 0)}
üéûÔ∏è <b>FPS:</b> {video_info.get('fps', 0)}
üìä <b>–§–æ—Ä–º–∞—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ:</b> {video_info.get('formats_available', 0)}

{EMOJIS['quality']} <b>–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤:</b>
"""
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback data
    try:
        encoded_url = base64.b64encode(tiktok_url.encode('utf-8')).decode('utf-8')
        if len(encoded_url) > 50:
            url_hash = hashlib.md5(tiktok_url.encode()).hexdigest()[:16]
            if user.id not in user_data_dict:
                user_data_dict[user.id] = {}
            user_data_dict[user.id]['current_video_url'] = tiktok_url
            user_data_dict[user.id]['video_info'] = video_info
            encoded_url = url_hash
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è URL: {e}")
        encoded_url = "error"
    
    keyboard = [[InlineKeyboardButton(
        f"üé¨ –°–∫–∞—á–∞—Ç—å TikTok –≤–∏–¥–µ–æ",
        callback_data=f"dl_default_{encoded_url}"
    )]]
    
    keyboard.append([InlineKeyboardButton(f"{EMOJIS['error']} –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if user.id not in user_data_dict:
        user_data_dict[user.id] = {}
    user_data_dict[user.id]['current_video_url'] = tiktok_url
    user_data_dict[user.id]['video_info'] = video_info
    
    await message.reply_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

@app.on_callback_query()
async def callback_query_handler(client, query):
    data = query.data
    user = query.from_user
    await query.answer()
    
    try:
        if data == "stats":
            await show_user_stats(client, query)
        elif data == "help":
            await show_help(client, query)
        elif data == "cancel":
            await query.edit_message_text(f"{EMOJIS['success']} –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        elif data.startswith("locked_"):
            quality = data.split("_")[1]
            me = await client.get_me()
            bot_username = me.username
            await query.edit_message_text(
                f"{EMOJIS['lock']} <b>–ö–∞—á–µ—Å—Ç–≤–æ {quality} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!</b>\n\n"
                f"{EMOJIS['gift']} –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 –¥—Ä—É–∑–µ–π –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ 1080p\n"
                f"{EMOJIS['link']} –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
                f"<code>{generate_referral_link(user.id, bot_username)}</code>",
                parse_mode=ParseMode.HTML
            )
        elif data.startswith("dl_"):
            await process_download(client, query)
        elif data.startswith("yt_"):
            await process_youtube_download(client, query)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_query_handler: {e}")
        await query.edit_message_text(
            f"{EMOJIS['error']} <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ",
            parse_mode=ParseMode.HTML
        )

async def show_user_stats(client, query):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = query.from_user
    user_data = db.get_user(user.id)
    me = await client.get_me()
    bot_username = me.username
    
    if user_data:
        referral_count = user_data[4]
        total_downloads = user_data[5]
        created_at = datetime.fromisoformat(user_data[7])
        days_with_bot = (datetime.now() - created_at).days
        
        text = f"""
{EMOJIS['stats']} <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

{EMOJIS['user']} <b>–ò–º—è:</b> {user.first_name}
{EMOJIS['users']} <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> {referral_count}
{EMOJIS['download']} <b>–°–∫–∞—á–∞–Ω–æ –≤–∏–¥–µ–æ:</b> {total_downloads}
üìÖ <b>–° –Ω–∞–º–∏:</b> {days_with_bot} –¥–Ω–µ–π

{EMOJIS['quality']} <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:</b>
‚Ä¢ 360p/480p/720p: {EMOJIS['success']}
‚Ä¢ 1080p: {"‚úÖ" if referral_count >= 3 or is_admin(user.id) else "üîí"}

{EMOJIS['gift']} <b>–î–æ 1080p –æ—Å—Ç–∞–ª–æ—Å—å:</b> {max(0, 3 - referral_count)} –¥—Ä—É–∑–µ–π
"""
    else:
        text = f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    referral_link = generate_referral_link(user.id, bot_username)
    share_url = f"https://t.me/share/url?url={quote_plus(referral_link)}&text={quote_plus('–°–∫–∞—á–∏–≤–∞–π –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤!')}"
    keyboard = [[InlineKeyboardButton(f"{EMOJIS['users']} –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", url=share_url)]]
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_help(client, query):
    """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏"""
    text = f"""
{EMOJIS['info']} <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>

{EMOJIS['rocket']} <b>–ö–∞–∫ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ:</b>
1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –∏–ª–∏ YouTube –≤–∏–¥–µ–æ
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ –±–æ—Ç—É
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ
4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤!

{EMOJIS['link']} <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏:</b>
<b>TikTok:</b>
‚Ä¢ tiktok.com/@user/video/123...
‚Ä¢ vm.tiktok.com/abc123
‚Ä¢ vt.tiktok.com/xyz789
‚Ä¢ m.tiktok.com/...

<b>YouTube:</b>
‚Ä¢ youtube.com/watch?v=...
‚Ä¢ youtu.be/...
‚Ä¢ youtube.com/shorts/...

{EMOJIS['gift']} <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ 3 –¥—Ä—É–≥–∞ = –¥–æ—Å—Ç—É–ø –∫ 1080p
‚Ä¢ 720p –∏ –Ω–∏–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º!
‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!

{EMOJIS['quality']} <b>–ö–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ:</b>
üì± 360p - –±–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
üíª 480p - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ  
üñ•Ô∏è 720p - HD –∫–∞—á–µ—Å—Ç–≤–æ (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º)
üé¨ 1080p - Full HD (3+ –¥—Ä—É–≥–∞)
üéµ –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ (MP3) - –¥–ª—è YouTube

{EMOJIS['warning']} <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ –¢–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –≤–∏–¥–µ–æ
‚Ä¢ YouTube: –º–∞–∫—Å–∏–º—É–º {MAX_FILE_SIZE_YOUTUBE/1024/1024:.0f}MB
‚Ä¢ TikTok: –º–∞–∫—Å–∏–º—É–º {MAX_FILE_SIZE_TIKTOK/1024/1024:.0f}MB
‚Ä¢ –ë–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤
"""
    
    keyboard = [[InlineKeyboardButton(f"{EMOJIS['rocket']} –ù–∞—á–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ", callback_data="cancel")]]
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def process_download(client, query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è TikTok –≤–∏–¥–µ–æ"""
    user = query.from_user
    try:
        data_parts = query.data.split('_')
        if len(data_parts) < 3:
            await query.edit_message_text(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
            return
        quality = data_parts[1]
        encoded_url = '_'.join(data_parts[2:])
        # –ü–æ–ª—É—á–∞–µ–º URL
        if len(encoded_url) <= 16:  # –≠—Ç–æ —Ö–µ—à
            if user.id in user_data_dict:
                tiktok_url = user_data_dict[user.id].get('current_video_url')
                if not tiktok_url:
                    await query.edit_message_text(f"{EMOJIS['error']} –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
                    return
            else:
                await query.edit_message_text(f"{EMOJIS['error']} –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
                return
        else:
            try:
                tiktok_url = base64.b64decode(encoded_url.encode()).decode('utf-8')
            except Exception:
                await query.edit_message_text(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏")
                return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await query.edit_message_text(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        return
    await query.edit_message_text(
        f"{EMOJIS['download']} <b>–°–∫–∞—á–∏–≤–∞—é TikTok –≤–∏–¥–µ–æ...</b>\n"
        f"{EMOJIS['time']} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode=ParseMode.HTML
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_activity(user.id)
    try:
        start_time = time.time()
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞—á–µ—Å—Ç–≤–∞
        user_data = db.get_user(user.id)
        referral_count = user_data[4] if user_data else 0
        quality_options = downloader.get_quality_options(referral_count, is_admin(user.id), 'tiktok')
        if quality not in quality_options:
            await query.edit_message_text(f"{EMOJIS['error']} –ö–∞—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return
        quality_format = quality_options[quality]['format']
        result = await downloader.download_with_quality(tiktok_url, quality_format)
        if result['success']:
            download_time = time.time() - start_time
            video_info = user_data_dict[user.id].get('video_info', {}) if user.id in user_data_dict else {}
            file_size_mb = len(result['data']) / (1024 * 1024)
            caption = f"""
{EMOJIS['success']} <b>TikTok –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ!</b>

üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {video_info.get('title', 'TikTok Video')[:50]}
{EMOJIS['user']} <b>–ê–≤—Ç–æ—Ä:</b> {video_info.get('uploader', 'Unknown')}
{EMOJIS['size']} <b>–†–∞–∑–º–µ—Ä:</b> {file_size_mb:.1f}MB
‚ö° <b>–í—Ä–µ–º—è:</b> {download_time:.1f}—Å
"""
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –∫–∞–Ω–∞–ª-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            await query.edit_message_text(
                f"{EMOJIS['upload']} –ó–∞–≥—Ä—É–∂–∞—é –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...",
                parse_mode=ParseMode.HTML
            )
            message_id = await upload_to_storage_channel(client, result['data'], result['filename'], caption)
            if message_id:
                # –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª - –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                try:
                    storage_message = await client.get_messages(STORAGE_CHANNEL_ID, message_id)
                    await client.send_video(
                        chat_id=user.id,
                        video=storage_message.video.file_id,
                        caption=caption,
                        parse_mode=ParseMode.HTML
                    )
                    db.add_download(user.id, tiktok_url, video_info.get('title', 'TikTok Video'), 'default', len(result['data']), download_time)
                    await query.message.delete()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
                    file_obj = BytesIO(result['data'])
                    file_obj.name = result['filename']
                    await client.send_video(
                        chat_id=user.id,
                        video=file_obj,
                        caption=caption,
                        parse_mode=ParseMode.HTML
                    )
                    db.add_download(user.id, tiktok_url, video_info.get('title', 'TikTok Video'), 'default', len(result['data']), download_time)
                    await query.message.delete()
            else:
                # –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
                await query.edit_message_text("‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞–ø—Ä—è–º—É—é...")
                file_obj = BytesIO(result['data'])
                file_obj.name = result['filename']
                await client.send_video(
                    chat_id=user.id,
                    video=file_obj,
                    caption=caption,
                    parse_mode=ParseMode.HTML
                )
                db.add_download(user.id, tiktok_url, video_info.get('title', 'TikTok Video'), 'default', len(result['data']), download_time)
                await query.message.delete()
        else:
            await query.edit_message_text(
                f"{EMOJIS['error']} <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ</b>\n\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
                f"{EMOJIS['info']} <b>–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</b>\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–∏–¥–µ–æ –ø—É–±–ª–∏—á–Ω–æ–µ\n"
                f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É TikTok\n"
                f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã\n"
                f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ\n\n"
                f"{EMOJIS['sparkles']} <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</i>",
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è TikTok: {e}")
        await query.edit_message_text(
            f"{EMOJIS['error']} <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ",
            parse_mode=ParseMode.HTML
        )

async def process_youtube_download(client, query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è YouTube –≤–∏–¥–µ–æ"""
    user = query.from_user
    try:
        data_parts = query.data.split('_')
        quality = data_parts[1]
        encoded_url = '_'.join(data_parts[2:])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ premium –∫–∞—á–µ—Å—Ç–≤–∞–º
        if quality in ['1080p', 'best']:
            user_data = db.get_user(user.id)
            referral_count = user_data[4] if user_data else 0
            if not is_admin(user.id) and referral_count < 3:
                await query.edit_message_text(
                    f"{EMOJIS['lock']} <b>–ö–∞—á–µ—Å—Ç–≤–æ {quality} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!</b>\n\n"
                    f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ {3 - referral_count} –¥—Ä—É–∑–µ–π –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!",
                    parse_mode=ParseMode.HTML
                )
                return
        
        if len(encoded_url) <= 16:
            if user.id in user_data_dict:
                youtube_url = user_data_dict[user.id].get('current_video_url')
            else:
                youtube_url = None
        else:
            try:
                youtube_url = base64.b64decode(encoded_url.encode()).decode('utf-8')
            except:
                youtube_url = None
        
        if not youtube_url:
            await query.edit_message_text(f"{EMOJIS['error']} –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YouTube callback: {e}")
        await query.edit_message_text(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    await query.edit_message_text(
        f"{EMOJIS['download']} <b>–°–∫–∞—á–∏–≤–∞—é YouTube –≤–∏–¥–µ–æ...</b>\n"
        f"{EMOJIS['quality']} –ö–∞—á–µ—Å—Ç–≤–æ: {quality}\n"
        f"{EMOJIS['time']} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode=ParseMode.HTML
    )
    
    try:
        start_time = time.time()
        
        user_data = db.get_user(user.id)
        referral_count = user_data[4] if user_data else 0
        quality_options = downloader.get_quality_options(referral_count, is_admin(user.id), 'youtube')
        
        if quality not in quality_options:
            await query.edit_message_text(f"{EMOJIS['error']} –ö–∞—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return
        
        quality_format = quality_options[quality]['format']
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è {quality}: {quality_format}")
        
        result = await youtube_downloader.download_with_quality(youtube_url, quality_format)
        
        if result['success']:
            download_time = time.time() - start_time
            video_info = user_data_dict[user.id].get('video_info', {}) if user.id in user_data_dict else {}
            file_size_mb = len(result['data']) / (1024 * 1024)
            
            caption = f"""
{EMOJIS['success']} <b>YouTube –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ!</b>

üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {video_info.get('title', 'YouTube Video')[:50]}
{EMOJIS['user']} <b>–ö–∞–Ω–∞–ª:</b> {video_info.get('uploader', 'Unknown')}
{EMOJIS['quality']} <b>–ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}
{EMOJIS['size']} <b>–†–∞–∑–º–µ—Ä:</b> {file_size_mb:.1f}MB
‚ö° <b>–í—Ä–µ–º—è:</b> {download_time:.1f}—Å
"""
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –∫–∞–Ω–∞–ª-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            await query.edit_message_text(
                f"{EMOJIS['upload']} –ó–∞–≥—Ä—É–∂–∞—é –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...",
                parse_mode=ParseMode.HTML
            )
            
            message_id = await upload_to_storage_channel(client, result['data'], result['filename'], caption)
            
            if message_id:
                # –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª - –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                try:
                    storage_message = await client.get_messages(STORAGE_CHANNEL_ID, message_id)
                    await client.send_video(
                        chat_id=user.id,
                        video=storage_message.video.file_id,
                        caption=caption,
                        parse_mode=ParseMode.HTML
                    )
                    db.add_download(user.id, youtube_url, video_info.get('title', 'YouTube Video'), quality, len(result['data']), download_time)
                    await query.message.delete()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
                    file_obj = BytesIO(result['data'])
                    file_obj.name = result['filename']
                    await client.send_video(
                        chat_id=user.id,
                        video=file_obj,
                        caption=caption,
                        parse_mode=ParseMode.HTML
                    )
                    db.add_download(user.id, youtube_url, video_info.get('title', 'YouTube Video'), quality, len(result['data']), download_time)
                    await query.message.delete()

            else:
                # –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
                await query.edit_message_text("‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞–ø—Ä—è–º—É—é...")
                
                file_obj = BytesIO(result['data'])
                file_obj.name = result['filename']
                
                await client.send_video(
                    chat_id=user.id,
                    video=file_obj,
                    caption=caption,
                    parse_mode=ParseMode.HTML
                )
                db.add_download(user.id, youtube_url, video_info.get('title', 'YouTube Video'), quality, len(result['data']), download_time)
                await query.message.delete()
            
        else:
            await query.edit_message_text(
                f"{EMOJIS['error']} <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ</b>\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                parse_mode=ParseMode.HTML
            )
            
    except Exception as e:
        logger.error(f"YouTube download error: {e}")
        await query.edit_message_text(
            f"{EMOJIS['error']} –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è YouTube –≤–∏–¥–µ–æ",
            parse_mode=ParseMode.HTML
        )

@app.on_message(filters.command("adminstats"))
async def admin_stats(client, message):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∫–æ–º–∞–Ω–¥–∞ /adminstats)"""
    user = message.from_user
    
    if not is_admin(user.id):
        await message.reply_text(f"{EMOJIS['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    stats = db.get_stats()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
    conn = sqlite3.connect(db.db_path)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT username, first_name, referral_count, total_downloads 
        FROM users 
        ORDER BY referral_count DESC 
        LIMIT 10
    ''')
    top_referrers = cursor.fetchall()
    
    cursor.execute('''
        SELECT COUNT(*) FROM users 
        WHERE date(created_at) = date("now")
    ''')
    new_users_today = cursor.fetchone()[0]
    
    cursor.execute('''
        SELECT COUNT(*) FROM downloads 
        WHERE date(created_at) = date("now")
    ''')
    downloads_today = cursor.fetchone()[0]
    
    conn.close()
    
    text = f"""
{EMOJIS['crown']} <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b> {EMOJIS['crown']}

{EMOJIS['stats']} <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
{EMOJIS['users']} –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>
{EMOJIS['download']} –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: <b>{stats['total_downloads']}</b>
{EMOJIS['sparkles']} –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <b>{stats['active_today']}</b>
{EMOJIS['gift']} –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <b>{new_users_today}</b>
üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: <b>{downloads_today}</b>

{EMOJIS['trophy']} <b>–¢–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:</b>
"""
    
    for i, (username, first_name, ref_count, downloads) in enumerate(top_referrers[:5], 1):
        display_name = f"@{username}" if username else first_name or "–ê–Ω–æ–Ω–∏–º"
        text += f"{i}. {display_name}: {ref_count} —Ä–µ—Ñ. ({downloads} —Å–∫–∞—á.)\n"
    
    uptime = datetime.now() - bot_start_time
    text += f"\n{EMOJIS['time']} <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {str(uptime).split('.')[0]}"
    
    await message.reply_text(text, parse_mode=ParseMode.HTML)

@app.on_message(filters.command("broadcast"))
async def broadcast_command(client, message):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user = message.from_user
    
    if not is_admin(user.id):
        await message.reply_text(f"{EMOJIS['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    command_parts = message.text.split(' ', 1)
    if len(command_parts) < 2:
        await message.reply_text(
            f"{EMOJIS['info']} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n"
            f"–ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞!"
        )
        return
    
    broadcast_text = command_parts[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn = sqlite3.connect(db.db_path)
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users')
    all_users = cursor.fetchall()
    conn.close()
    
    sent_count = 0
    failed_count = 0
    
    status_msg = await message.reply_text(
        f"{EMOJIS['rocket']} –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
    )
    
    for (user_id,) in all_users:
        try:
            await client.send_message(
                chat_id=user_id,
                text=f"{EMOJIS['diamond']} <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n{broadcast_text}",
                parse_mode=ParseMode.HTML
            )
            sent_count += 1
            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        except Exception as e:
            failed_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    await status_msg.edit_text(
        f"{EMOJIS['success']} <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}\n"
        f"üìä –í—Å–µ–≥–æ: {len(all_users)}",
        parse_mode=ParseMode.HTML
    )

@app.on_message(filters.text & ~filters.command(['start', 'adminstats', 'broadcast']))
async def handle_message(client, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏"""
    message_text = message.text
    video_url = downloader.extract_video_url(message_text)
    
    if not video_url:
        await message.reply_text(
            f"{EMOJIS['link']} <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –∏–ª–∏ YouTube –≤–∏–¥–µ–æ</b>\n\n"
            f"üé¨ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n"
            f"‚Ä¢ TikTok (–≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫)\n"
            f"‚Ä¢ YouTube (–æ–±—ã—á–Ω—ã–µ –≤–∏–¥–µ–æ –∏ Shorts)\n\n"
            f"üìù –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ!",
            parse_mode=ParseMode.HTML
        )
        return
    
    platform = downloader.detect_platform(video_url)
    
    if platform == 'tiktok':
        await download_tiktok_video(client, message, video_url)
    elif platform == 'youtube':
        await download_youtube_video(client, message, video_url)
    else:
        await message.reply_text(f"{EMOJIS['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤–∏–¥–µ–æ")

async def download_tiktok_video(client, message: Message, tiktok_url: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è TikTok –≤–∏–¥–µ–æ"""
    await client.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    
    status_message = await message.reply_text(
        f"{EMOJIS['magic']} <b>–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TikTok –≤–∏–¥–µ–æ...</b>",
        parse_mode=ParseMode.HTML
    )
    
    try:
        resolved_url = downloader.resolve_tiktok_url(tiktok_url)
        video_info = await downloader.get_video_info(resolved_url)
        
        await status_message.delete()
        await quality_selection(client, message, resolved_url, video_info)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TikTok –≤–∏–¥–µ–æ: {e}")
        await status_message.edit_text(
            f"{EMOJIS['error']} <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å TikTok –≤–∏–¥–µ–æ</b>\n\n"
            f"{EMOJIS['info']} –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"‚Ä¢ –í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
            f"‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç\n"
            f"‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
            f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É",
            parse_mode=ParseMode.HTML
        )

async def download_youtube_video(client, message: Message, youtube_url: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è YouTube –≤–∏–¥–µ–æ"""
    await client.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    
    status_message = await message.reply_text(
        f"{EMOJIS['download']} <b>–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ YouTube –≤–∏–¥–µ–æ...</b>",
        parse_mode=ParseMode.HTML
    )
    
    try:
        video_info = await youtube_downloader.get_video_info(youtube_url)
        
        if not video_info:
            await status_message.edit_text(
                f"{EMOJIS['error']} <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ</b>\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ\n"
                f"‚Ä¢ –í–∏–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ\n"
                f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É\n"
                f"‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ",
                parse_mode=ParseMode.HTML
            )
            return
        
        await status_message.delete()
        await youtube_quality_selection(client, message, youtube_url, video_info)
        
    except Exception as e:
        logger.error(f"YouTube critical error: {e}")
        await status_message.edit_text(
            f"{EMOJIS['error']} <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ",
            parse_mode=ParseMode.HTML
        )

async def youtube_quality_selection(client, message: Message, youtube_url: str, video_info: dict):
    """–í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è YouTube –≤–∏–¥–µ–æ"""
    user = message.from_user
    user_data = db.get_user(user.id)
    referral_count = user_data[4] if user_data else 0
    is_user_admin = is_admin(user.id)
    
    quality_options = downloader.get_quality_options(referral_count, is_user_admin, 'youtube')
    
    duration_seconds = int(video_info.get('duration', 0))
    duration_str = str(timedelta(seconds=duration_seconds))
    
    warning_text = ""
    if duration_seconds > 1200:  # 20 –º–∏–Ω—É—Ç
        warning_text = f"\nüö® <i>–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –≤–∏–¥–µ–æ ({duration_str}), —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º 720p –∏–ª–∏ –∞—É–¥–∏–æ</i>"
    elif duration_seconds > 600:  # 10 –º–∏–Ω—É—Ç
        warning_text = f"\n‚ö†Ô∏è <i>–í–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–æ–µ ({duration_str}), —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–∏–º</i>"
    
    text = f"""
{EMOJIS['video']} <b>YouTube –≤–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ:</b>

üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {video_info.get('title', 'YouTube Video')[:100]}
{EMOJIS['user']} <b>–ö–∞–Ω–∞–ª:</b> {video_info.get('uploader', 'Unknown')}
{EMOJIS['time']} <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration_str}
üëÄ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {video_info.get('view_count', 0):,}
üëç <b>–õ–∞–π–∫–∏:</b> {video_info.get('like_count', 0):,}{warning_text}

{EMOJIS['quality']} <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:</b>
<i>–õ–∏–º–∏—Ç: {MAX_FILE_SIZE_YOUTUBE/1024/1024:.0f}MB –¥–ª—è YouTube</i>
"""
    
    keyboard = []
    row = []
    
    try:
        encoded_url = base64.b64encode(youtube_url.encode('utf-8')).decode('utf-8')
        if len(encoded_url) > 50:
            url_hash = hashlib.md5(youtube_url.encode()).hexdigest()[:16]
            if user.id not in user_data_dict:
                user_data_dict[user.id] = {}
            user_data_dict[user.id]['current_video_url'] = youtube_url
            user_data_dict[user.id]['video_info'] = video_info
            encoded_url = url_hash
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è YouTube URL: {e}")
        encoded_url = "error"
    
    for quality, options in quality_options.items():
        if quality in ['1080p', 'best'] and not is_user_admin and referral_count < 3:
            row.append(InlineKeyboardButton(
                f"üîí {quality} (–Ω—É–∂–Ω–æ {3-referral_count} —Ä–µ—Ñ.)",
                callback_data=f"locked_{quality}"
            ))
        elif quality == 'audio_only':
            row.append(InlineKeyboardButton(
                f"{options['emoji']} MP3",
                callback_data=f"yt_{quality}_{encoded_url}"
            ))
        elif quality == 'best':
            row.append(InlineKeyboardButton(
                f"{options['emoji']} –õ—É—á—à–µ–µ",
                callback_data=f"yt_{quality}_{encoded_url}"
            ))
        else:
            row.append(InlineKeyboardButton(
                f"{options['emoji']} {quality}",
                callback_data=f"yt_{quality}_{encoded_url}"
            ))
        
        if len(row) == 2:
            keyboard.append(row)
            row = []
    
    if row:
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton(f"{EMOJIS['error']} –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if user.id not in user_data_dict:
        user_data_dict[user.id] = {}
    user_data_dict[user.id]['current_video_url'] = youtube_url
    user_data_dict[user.id]['video_info'] = video_info
    user_data_dict[user.id]['platform'] = 'youtube'
    
    await message.reply_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def detailed_diagnosis():
    print("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===")
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º ffmpeg
    try:
        result = subprocess.run(['ffmpeg', '-version'], capture_output=True, text=True)
        print("‚úÖ ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"–í–µ—Ä—Å–∏—è: {result.stdout.split()[2] if result.stdout else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    except Exception as e:
        print("‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω", e)
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º yt-dlp
    try:
        print(f"‚úÖ yt-dlp –≤–µ—Ä—Å–∏—è: {yt_dlp.version.__version__}")
    except Exception as e:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å yt-dlp", e)
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
    try:
        import requests
        response = requests.get("https://www.google.com", timeout=5)
        print("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º", e)
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –≤–∏–¥–µ–æ
    test_url = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
    ydl_opts = {
        'quiet': False,
        'no_warnings': False,
        'extract_flat': True,
        'force_json': True,
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(test_url, download=False)
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Ä–∞–±–æ—Ç–∞–µ—Ç: {info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            return True
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        return False

def update_yt_dlp():
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--upgrade', 'yt-dlp'])
        print("‚úÖ yt-dlp –æ–±–Ω–æ–≤–ª–µ–Ω")
    except:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å yt-dlp")

def get_video_info(url):
    ydl_opts = {
        'quiet': False,
        'no_warnings': False,
        'extract_flat': False,
        'writesubtitles': False,
        'writeautomaticsub': False,
        'ignoreerrors': True,
        'geo_bypass': True,
        'geo_bypass_country': 'US',
        'extractor_retries': 3,
        'fragment_retries': 3,
        'skip_unavailable_fragments': True,
        'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'referer': 'https://www.youtube.com/',
        'headers': {
            'Accept-Language': 'en-US,en;q=0.9',
        },
        'format': 'best[height<=480]',
        'noplaylist': True,
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            print(f"üîç –ü—Ä–æ–±—É—é –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ: {url}")
            info = ydl.extract_info(url, download=False)
            if info:
                print(f"‚úÖ –£—Å–ø–µ—Ö! –ù–∞–∑–≤–∞–Ω–∏–µ: {info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                print(f"üì∫ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info.get('duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} —Å–µ–∫")
                print(f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {info.get('view_count', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                return info
            else:
                print("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        try:
            print("üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
            ydl_opts_simple = {
                'quiet': True,
                'extract_flat': True,
                'force_json': True,
            }
            with yt_dlp.YoutubeDL(ydl_opts_simple) as ydl:
                info = ydl.extract_info(url, download=False)
                if info:
                    print(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å—Ä–∞–±–æ—Ç–∞–ª: {info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    return info
        except Exception as e2:
            print(f"‚ùå –ò –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {str(e2)}")
        return None

def extract_video_id(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –≤–∏–¥–µ–æ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ YouTube —Å—Å—ã–ª–æ–∫"""
    patterns = [
        r'(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([a-zA-Z0-9_-]{11})',
        r'youtube\.com\/.*[?&]v=([a-zA-Z0-9_-]{11})',
    ]
    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            return match.group(1)
    return None

def get_youtube_info(url):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ YouTube –≤–∏–¥–µ–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    video_id = extract_video_id(url)
    print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é YouTube –≤–∏–¥–µ–æ ID: {video_id}")
    if not video_id:
        return None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ –∏–∑ —Å—Å—ã–ª–∫–∏"
    alternative_urls = [
        f"https://www.youtube.com/watch?v={video_id}",
        f"https://youtu.be/{video_id}",
        f"https://www.youtube.com/embed/{video_id}",
        f"https://m.youtube.com/watch?v={video_id}"
    ]
    ydl_configs = [
        {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': False,
            'format': 'best[height<=720]',
            'noplaylist': True,
        },
        {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': False,
            'format': 'best[height<=480]',
            'noplaylist': True,
            'geo_bypass': True,
            'geo_bypass_country': 'US',
        },
        {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': True,
            'force_json': True,
            'noplaylist': True,
        },
    ]
    for config_num, ydl_opts in enumerate(ydl_configs, 1):
        for url_num, test_url in enumerate(alternative_urls, 1):
            try:
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {config_num}.{url_num}: {test_url[:50]}...")
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    info = ydl.extract_info(test_url, download=False)
                    if info and info.get('title'):
                        print(f"‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ: {info.get('title')}")
                        return info, None
            except Exception as e:
                error_msg = str(e).lower()
                print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {config_num}.{url_num} –Ω–µ—É–¥–∞—á–Ω–∞: {str(e)[:100]}...")
                if 'unavailable' in error_msg or 'private' in error_msg:
                    continue
                elif 'blocked' in error_msg:
                    continue
                elif 'age' in error_msg:
                    continue
                else:
                    continue
    error_messages = [
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ",
        "",
        "üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:",
        "‚Ä¢ –í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —Å–¥–µ–ª–∞–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º",
        "‚Ä¢ –í–∏–¥–µ–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ",
        "‚Ä¢ –í–∏–¥–µ–æ –∏–º–µ–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
        "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ ID –≤–∏–¥–µ–æ",
        "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å YouTube API",
        "",
        "üí° –ß—Ç–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:",
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
        "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ",
        "‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
    ]
    return None, "\n".join(error_messages)

def handle_youtube_url(url, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ YouTube —Å—Å—ã–ª–æ–∫ –¥–ª—è –±–æ—Ç–∞"""
    try:
        processing_msg = message.reply("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é YouTube –≤–∏–¥–µ–æ...")
        info, error = get_youtube_info(url)
        if info:
            title = info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            duration = info.get('duration', 0)
            view_count = info.get('view_count', 0)
            uploader = info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            duration_str = f"{duration//60}:{duration%60:02d}" if duration else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            success_message = (
                f"‚úÖ **–í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ!**\n\n"
                f"üì∫ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}\n"
                f"üë§ **–ê–≤—Ç–æ—Ä:** {uploader}\n"
                f"‚è± **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {duration_str}\n"
                f"üëÅ **–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:** {view_count:,}\n\n"
                f"‚¨áÔ∏è –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ..."
            )
            processing_msg.edit_text(success_message)
        else:
            processing_msg.edit_text(error)
    except Exception as e:
        message.reply(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

def download_without_ffmpeg(url):
    import yt_dlp
    ydl_opts = {
        'format': 'best[ext=mp4]/best',  # –í—ã–±–∏—Ä–∞–µ–º –≥–æ—Ç–æ–≤—ã–π mp4
        'outtmpl': '%(title)s.%(ext)s',
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            ydl.download([url])
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

# –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ —Ç–µ—Å—Ç–æ–≤ (–º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
if __name__ == '__main__':
    app.run()